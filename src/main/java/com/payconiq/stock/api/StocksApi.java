/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.payconiq.stock.api;

import com.payconiq.stock.model.Stock;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-08-03T17:00:34.400Z[GMT]")
@Api(value = "stocks", description = "the stocks API")
public interface StocksApi {

    @ApiOperation(value = "Create a stock", nickname = "createStock", notes = "", tags = {"stock",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "Created"),
            @ApiResponse(code = 400, message = "Invalid Input")})
    @RequestMapping(value = "/stocks",
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Void> createStock(@ApiParam(value = "") @Valid @RequestBody Stock body);


    @ApiOperation(value = "Get all stocks", nickname = "getAllStocks", notes = "Get a list of stocks", response = Stock.class, responseContainer = "List", tags = {"stock",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Stock.class, responseContainer = "List")})
    @RequestMapping(value = "/stocks",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<Stock>> getAllStocks();


    @ApiOperation(value = "Find stock by ID", nickname = "getStockById", notes = "Returns a single stock", response = Stock.class, tags = {"stock",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Stock.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Stock not found")})
    @RequestMapping(value = "/stocks/{id}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<Stock> getStockById(@ApiParam(value = "ID of stock to return", required = true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Update price of a stock by ID", nickname = "updateStockPrice", notes = "Update the price of a stock", response = Stock.class, tags = {"stock",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful update", response = Stock.class),
            @ApiResponse(code = 404, message = "Stock not found")})
    @RequestMapping(value = "/stocks/{id}",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Stock> updateStockPrice(@ApiParam(value = "Stock with new price", required = true) @Valid @RequestBody Stock body, @ApiParam(value = "ID of stock to update", required = true) @PathVariable("id") Integer id);

}
